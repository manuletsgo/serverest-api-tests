{
	"info": {
		"_postman_id": "8132a1d3-7840-4901-a604-0d1eb8b879de",
		"name": "Serverest-API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16557456"
	},
	"item": [
		{
			"name": "setup tests",
			"item": [
				{
					"name": "postmanBDD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setGlobalVariable('postmanBDD', responseBody)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.js",
							"protocol": "http",
							"host": [
								"bigstickcarpet",
								"com"
							],
							"path": [
								"postman-bdd",
								"dist",
								"postman-bdd.js"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "get users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.postmanBDD)\r",
							"\r",
							"const jsonData = pm.response.json()\r",
							"\r",
							"const schema = {\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"quantidade\",\r",
							"        \"usuarios\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"quantidade\": {\r",
							"            \"type\": \"integer\",\r",
							"            \"default\": 0,\r",
							"            \"title\": \"The quantidade Schema\",\r",
							"            \"examples\": [\r",
							"                10\r",
							"            ]\r",
							"        },\r",
							"        \"usuarios\": {\r",
							"            \"type\": \"array\",\r",
							"            \"default\": [],\r",
							"            \"title\": \"The usuarios Schema\",\r",
							"            \"items\": {\r",
							"                \"type\": \"object\",\r",
							"                \"title\": \"A Schema\",\r",
							"                \"required\": [\r",
							"                    \"nome\",\r",
							"                    \"email\",\r",
							"                    \"password\",\r",
							"                    \"administrador\",\r",
							"                    \"_id\"\r",
							"                ],\r",
							"                \"properties\": {\r",
							"                    \"nome\": {\r",
							"                        \"type\": \"string\",\r",
							"                        \"title\": \"The nome Schema\",\r",
							"                        \"examples\": [\r",
							"                            \"Fulano da Silva\",\r",
							"                            \"BettyeAHL\",\r",
							"                            \"Emanuele\",\r",
							"                            \"Emanuele Pagac\",\r",
							"                            \"Emanuele Waelchi\",\r",
							"                            \"{{generatedName}}\"\r",
							"                        ]\r",
							"                    },\r",
							"                    \"email\": {\r",
							"                        \"type\": \"string\",\r",
							"                        \"title\": \"The email Schema\",\r",
							"                        \"examples\": [\r",
							"                            \"fulano@qa.com\",\r",
							"                            \"bettyeahl_2871744@teste.com.br\",\r",
							"                            \"beltrano@qa.com.br\",\r",
							"                            \"emanuele11@qa.com.br\",\r",
							"                            \"emanuele@qa.com.br\",\r",
							"                            \"emanuele111@qa.com.br\",\r",
							"                            \"emanuele2@qa.com.br\",\r",
							"                            \"emanuele798@qa.com.br\",\r",
							"                            \"bettyeahl_3513870@teste.com.br\",\r",
							"                            \"Rosalee_Berge92@example.com\"\r",
							"                        ]\r",
							"                    },\r",
							"                    \"password\": {\r",
							"                        \"type\": \"string\",\r",
							"                        \"title\": \"The password Schema\",\r",
							"                        \"examples\": [\r",
							"                            \"teste\",\r",
							"                            \"Def456*@\"\r",
							"                        ]\r",
							"                    },\r",
							"                    \"administrador\": {\r",
							"                        \"type\": \"string\",\r",
							"                        \"title\": \"The administrador Schema\",\r",
							"                        \"examples\": [\r",
							"                            \"true\",\r",
							"                            \"false\"\r",
							"                        ]\r",
							"                    },\r",
							"                    \"_id\": {\r",
							"                        \"type\": \"string\",\r",
							"                        \"title\": \"The _id Schema\",\r",
							"                        \"examples\": [\r",
							"                            \"0uxuPY0cbmQhpEz1\",\r",
							"                            \"B9tYLngriwHzvgXw\",\r",
							"                            \"EjTujBJOOC5QkOl2\",\r",
							"                            \"YNX1Cnj2a6J075zF\",\r",
							"                            \"ZFltCutBjDHYsrJy\",\r",
							"                            \"avx4IrDwb36Yqm5n\",\r",
							"                            \"htcVwWkO6sb0saP5\",\r",
							"                            \"mD1pHNjFLnmahBZQ\",\r",
							"                            \"umvSTcx04FyZ21ei\",\r",
							"                            \"yUMR0Bh3Nc17Obww\"\r",
							"                        ]\r",
							"                    }\r",
							"                },\r",
							"                \"examples\": [{\r",
							"                    \"nome\": \"Fulano da Silva\",\r",
							"                    \"email\": \"fulano@qa.com\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"0uxuPY0cbmQhpEz1\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"BettyeAHL\",\r",
							"                    \"email\": \"bettyeahl_2871744@teste.com.br\",\r",
							"                    \"password\": \"Def456*@\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"B9tYLngriwHzvgXw\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"Fulano da Silva\",\r",
							"                    \"email\": \"beltrano@qa.com.br\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"EjTujBJOOC5QkOl2\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"Emanuele\",\r",
							"                    \"email\": \"emanuele11@qa.com.br\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"YNX1Cnj2a6J075zF\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"Emanuele\",\r",
							"                    \"email\": \"emanuele@qa.com.br\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"ZFltCutBjDHYsrJy\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"Emanuele Pagac\",\r",
							"                    \"email\": \"emanuele111@qa.com.br\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"avx4IrDwb36Yqm5n\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"Emanuele\",\r",
							"                    \"email\": \"emanuele2@qa.com.br\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"htcVwWkO6sb0saP5\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"Emanuele Waelchi\",\r",
							"                    \"email\": \"emanuele798@qa.com.br\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"mD1pHNjFLnmahBZQ\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"BettyeAHL\",\r",
							"                    \"email\": \"bettyeahl_3513870@teste.com.br\",\r",
							"                    \"password\": \"Def456*@\",\r",
							"                    \"administrador\": \"false\",\r",
							"                    \"_id\": \"umvSTcx04FyZ21ei\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"{{generatedName}}\",\r",
							"                    \"email\": \"Rosalee_Berge92@example.com\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"yUMR0Bh3Nc17Obww\"\r",
							"                }]\r",
							"            },\r",
							"            \"examples\": [\r",
							"                [{\r",
							"                    \"nome\": \"Fulano da Silva\",\r",
							"                    \"email\": \"fulano@qa.com\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"0uxuPY0cbmQhpEz1\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"BettyeAHL\",\r",
							"                    \"email\": \"bettyeahl_2871744@teste.com.br\",\r",
							"                    \"password\": \"Def456*@\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"B9tYLngriwHzvgXw\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"Fulano da Silva\",\r",
							"                    \"email\": \"beltrano@qa.com.br\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"EjTujBJOOC5QkOl2\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"Emanuele\",\r",
							"                    \"email\": \"emanuele11@qa.com.br\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"YNX1Cnj2a6J075zF\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"Emanuele\",\r",
							"                    \"email\": \"emanuele@qa.com.br\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"ZFltCutBjDHYsrJy\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"Emanuele Pagac\",\r",
							"                    \"email\": \"emanuele111@qa.com.br\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"avx4IrDwb36Yqm5n\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"Emanuele\",\r",
							"                    \"email\": \"emanuele2@qa.com.br\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"htcVwWkO6sb0saP5\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"Emanuele Waelchi\",\r",
							"                    \"email\": \"emanuele798@qa.com.br\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"mD1pHNjFLnmahBZQ\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"BettyeAHL\",\r",
							"                    \"email\": \"bettyeahl_3513870@teste.com.br\",\r",
							"                    \"password\": \"Def456*@\",\r",
							"                    \"administrador\": \"false\",\r",
							"                    \"_id\": \"umvSTcx04FyZ21ei\"\r",
							"                },\r",
							"                {\r",
							"                    \"nome\": \"{{generatedName}}\",\r",
							"                    \"email\": \"Rosalee_Berge92@example.com\",\r",
							"                    \"password\": \"teste\",\r",
							"                    \"administrador\": \"true\",\r",
							"                    \"_id\": \"yUMR0Bh3Nc17Obww\"\r",
							"                }]\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"quantidade\": 10,\r",
							"        \"usuarios\": [{\r",
							"            \"nome\": \"Fulano da Silva\",\r",
							"            \"email\": \"fulano@qa.com\",\r",
							"            \"password\": \"teste\",\r",
							"            \"administrador\": \"true\",\r",
							"            \"_id\": \"0uxuPY0cbmQhpEz1\"\r",
							"        },\r",
							"        {\r",
							"            \"nome\": \"BettyeAHL\",\r",
							"            \"email\": \"bettyeahl_2871744@teste.com.br\",\r",
							"            \"password\": \"Def456*@\",\r",
							"            \"administrador\": \"true\",\r",
							"            \"_id\": \"B9tYLngriwHzvgXw\"\r",
							"        },\r",
							"        {\r",
							"            \"nome\": \"Fulano da Silva\",\r",
							"            \"email\": \"beltrano@qa.com.br\",\r",
							"            \"password\": \"teste\",\r",
							"            \"administrador\": \"true\",\r",
							"            \"_id\": \"EjTujBJOOC5QkOl2\"\r",
							"        },\r",
							"        {\r",
							"            \"nome\": \"Emanuele\",\r",
							"            \"email\": \"emanuele11@qa.com.br\",\r",
							"            \"password\": \"teste\",\r",
							"            \"administrador\": \"true\",\r",
							"            \"_id\": \"YNX1Cnj2a6J075zF\"\r",
							"        },\r",
							"        {\r",
							"            \"nome\": \"Emanuele\",\r",
							"            \"email\": \"emanuele@qa.com.br\",\r",
							"            \"password\": \"teste\",\r",
							"            \"administrador\": \"true\",\r",
							"            \"_id\": \"ZFltCutBjDHYsrJy\"\r",
							"        },\r",
							"        {\r",
							"            \"nome\": \"Emanuele Pagac\",\r",
							"            \"email\": \"emanuele111@qa.com.br\",\r",
							"            \"password\": \"teste\",\r",
							"            \"administrador\": \"true\",\r",
							"            \"_id\": \"avx4IrDwb36Yqm5n\"\r",
							"        },\r",
							"        {\r",
							"            \"nome\": \"Emanuele\",\r",
							"            \"email\": \"emanuele2@qa.com.br\",\r",
							"            \"password\": \"teste\",\r",
							"            \"administrador\": \"true\",\r",
							"            \"_id\": \"htcVwWkO6sb0saP5\"\r",
							"        },\r",
							"        {\r",
							"            \"nome\": \"Emanuele Waelchi\",\r",
							"            \"email\": \"emanuele798@qa.com.br\",\r",
							"            \"password\": \"teste\",\r",
							"            \"administrador\": \"true\",\r",
							"            \"_id\": \"mD1pHNjFLnmahBZQ\"\r",
							"        },\r",
							"        {\r",
							"            \"nome\": \"BettyeAHL\",\r",
							"            \"email\": \"bettyeahl_3513870@teste.com.br\",\r",
							"            \"password\": \"Def456*@\",\r",
							"            \"administrador\": \"false\",\r",
							"            \"_id\": \"umvSTcx04FyZ21ei\"\r",
							"        },\r",
							"        {\r",
							"            \"nome\": \"{{generatedName}}\",\r",
							"            \"email\": \"Rosalee_Berge92@example.com\",\r",
							"            \"password\": \"teste\",\r",
							"            \"administrador\": \"true\",\r",
							"            \"_id\": \"yUMR0Bh3Nc17Obww\"\r",
							"        }]\r",
							"    }]\r",
							"}\r",
							"\r",
							"describe('Get Users', () => {\r",
							"\r",
							"    it(\"Status code should be '200 OK'\", () => {\r",
							"        response.should.have.status(200)\r",
							"        pm.response.to.have.status(\"OK\")\r",
							"    })\r",
							"\r",
							"    it(\"Content-Type header should be application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
							"    })\r",
							"\r",
							"    it(\"Schema should be valid\", () => {\r",
							"        pm.response.to.have.jsonSchema(schema)\r",
							"    })\r",
							"\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/usuarios",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"usuarios"
					]
				}
			},
			"response": []
		},
		{
			"name": "create user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.postmanBDD)\r",
							"\r",
							"const jsonData = pm.response.json()\r",
							"\r",
							"const schema = {\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"message\",\r",
							"        \"_id\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"message\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The message Schema\",\r",
							"            \"examples\": [\r",
							"                \"Cadastro realizado com sucesso\"\r",
							"            ]\r",
							"        },\r",
							"        \"_id\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The _id Schema\",\r",
							"            \"examples\": [\r",
							"                \"htcVwWkO6sb0saP5\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"message\": \"Cadastro realizado com sucesso\",\r",
							"        \"_id\": \"htcVwWkO6sb0saP5\"\r",
							"    }]\r",
							"}\r",
							"\r",
							"describe('Create User', () => {\r",
							"\r",
							"    it(\"Status code should be '201 Created'\", () => {\r",
							"        response.should.have.status(201)\r",
							"        pm.response.to.have.status(\"Created\")\r",
							"    })\r",
							"\r",
							"    it(\"Content-Type header should be application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
							"    })\r",
							"\r",
							"    it(\"Schema should be valid\", () => {\r",
							"        pm.response.to.have.jsonSchema(schema)\r",
							"    })\r",
							"\r",
							"\r",
							"    pm.environment.set(\"userId\", jsonData._id)\r",
							"\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"nome\": \"Emanuele\",\r\n  \"email\": \"emanuele{{$randomInt}}@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://serverest.dev/usuarios",
					"protocol": "https",
					"host": [
						"serverest",
						"dev"
					],
					"path": [
						"usuarios"
					]
				}
			},
			"response": []
		},
		{
			"name": "email already registered",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.postmanBDD)\r",
							"\r",
							"const jsonData = pm.response.json()\r",
							"\r",
							"const schema = {\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"message\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"message\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The message Schema\",\r",
							"            \"examples\": [\r",
							"                \"Este email já está sendo usado\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"message\": \"Este email já está sendo usado\"\r",
							"    }]\r",
							"}\r",
							"\r",
							"describe('Email already registered', () => {\r",
							"\r",
							"    it(\"Status code should be '400 Bad Request'\", () => {\r",
							"        response.should.have.status(400)\r",
							"        pm.response.to.have.status(\"Bad Request\")\r",
							"    })\r",
							"\r",
							"    it(\"Content-Type header should be application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
							"    })\r",
							"\r",
							"    it(\"Schema should be valid\", () => {\r",
							"        pm.response.to.have.jsonSchema(schema)\r",
							"    })\r",
							"\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"nome\": \"Emanuele\",\r\n  \"email\": \"emanuele2@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://serverest.dev/usuarios",
					"protocol": "https",
					"host": [
						"serverest",
						"dev"
					],
					"path": [
						"usuarios"
					]
				}
			},
			"response": []
		},
		{
			"name": "get user by Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.postmanBDD)\r",
							"\r",
							"const jsonData = pm.response.json()\r",
							"\r",
							"const schema = {\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"nome\",\r",
							"        \"email\",\r",
							"        \"password\",\r",
							"        \"administrador\",\r",
							"        \"_id\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"nome\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The nome Schema\",\r",
							"            \"examples\": [\r",
							"                \"Emanuele\"\r",
							"            ]\r",
							"        },\r",
							"        \"email\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The email Schema\",\r",
							"            \"examples\": [\r",
							"                \"emanuele2@qa.com.br\"\r",
							"            ]\r",
							"        },\r",
							"        \"password\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The password Schema\",\r",
							"            \"examples\": [\r",
							"                \"teste\"\r",
							"            ]\r",
							"        },\r",
							"        \"administrador\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The administrador Schema\",\r",
							"            \"examples\": [\r",
							"                \"true\"\r",
							"            ]\r",
							"        },\r",
							"        \"_id\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The _id Schema\",\r",
							"            \"examples\": [\r",
							"                \"htcVwWkO6sb0saP5\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"nome\": \"Emanuele\",\r",
							"        \"email\": \"emanuele2@qa.com.br\",\r",
							"        \"password\": \"teste\",\r",
							"        \"administrador\": \"true\",\r",
							"        \"_id\": \"htcVwWkO6sb0saP5\"\r",
							"    }]\r",
							"}\r",
							"\r",
							"describe('Get User by Id', () => {\r",
							"\r",
							"    it(\"Status code should be '200 OK'\", () => {\r",
							"        response.should.have.status(200)\r",
							"        pm.response.to.have.status(\"OK\")\r",
							"    })\r",
							"\r",
							"    it(\"Content-Type header should be application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
							"    })\r",
							"\r",
							"    it(\"Schema should be valid\", () => {\r",
							"        pm.response.to.have.jsonSchema(schema)\r",
							"    })\r",
							"\r",
							"\r",
							"\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/usuarios/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"usuarios",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.postmanBDD)\r",
							"\r",
							"const jsonData = pm.response.json()\r",
							"\r",
							"describe('Get User by Id', () => {\r",
							"\r",
							"    it(\"Status code should be '200 OK'\", () => {\r",
							"        response.should.have.status(200)\r",
							"        pm.response.to.have.status(\"OK\")\r",
							"    })\r",
							"\r",
							"    it(\"Content-Type header should be application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
							"    })\r",
							"\r",
							"    // it(\"Schema should be valid\", () => {\r",
							"    //     pm.response.to.have.jsonSchema(schema)\r",
							"    // })\r",
							"\r",
							"    it(\"Usuarios should exist and be an array\", () => {\r",
							"        pm.expect(jsonData.usuarios).to.be.an('array')\r",
							"        pm.expect(jsonData.usuarios).not.be.empty\r",
							"    })\r",
							"\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/usuarios/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"usuarios",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "update user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.postmanBDD)\r",
							"\r",
							"const jsonData = pm.response.json()\r",
							"\r",
							"const schema = {\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"message\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"message\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The message Schema\",\r",
							"            \"examples\": [\r",
							"                \"Registro alterado com sucesso\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"message\": \"Registro alterado com sucesso\"\r",
							"    }]\r",
							"}\r",
							"\r",
							"describe('Update User', () => {\r",
							"\r",
							"    it(\"Status code should be '200 OK'\", () => {\r",
							"        response.should.have.status(200)\r",
							"        pm.response.to.have.status(\"OK\")\r",
							"    })\r",
							"\r",
							"    it(\"Content-Type header should be application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
							"    })\r",
							"\r",
							"    it(\"Schema should be valid\", () => {\r",
							"        pm.response.to.have.jsonSchema(schema)\r",
							"    })\r",
							"\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"nome\": \"Emanuele {{$randomLastName}}\",\r\n  \"email\": \"emanuele{{$randomInt}}@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/usuarios/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"usuarios",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"eval(globals.postmanBDD)\r",
							"\r",
							"const jsonData = pm.response.json()\r",
							"\r",
							"const schema = {\r",
							"    \"$id\": \"http://example.com/example.json\",\r",
							"    \"type\": \"object\",\r",
							"    \"default\": {},\r",
							"    \"title\": \"Root Schema\",\r",
							"    \"required\": [\r",
							"        \"message\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"message\": {\r",
							"            \"type\": \"string\",\r",
							"            \"default\": \"\",\r",
							"            \"title\": \"The message Schema\",\r",
							"            \"examples\": [\r",
							"                \"Registro excluído com sucesso\"\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"examples\": [{\r",
							"        \"message\": \"Registro excluído com sucesso\"\r",
							"    }]\r",
							"}\r",
							"\r",
							"describe('Delete User', () => {\r",
							"\r",
							"    it(\"Status code should be '200 OK'\", () => {\r",
							"        response.should.have.status(200)\r",
							"        pm.response.to.have.status(\"OK\")\r",
							"    })\r",
							"\r",
							"    it(\"Content-Type header should be application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
							"    })\r",
							"\r",
							"    it(\"Schema should be valid\", () => {\r",
							"        pm.response.to.have.jsonSchema(schema)\r",
							"    })\r",
							"\r",
							"\r",
							"\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/usuarios/{{userId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"usuarios",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}